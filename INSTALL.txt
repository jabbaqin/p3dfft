P3DFFT - Highly scalable parallel 3D Fast Fourier Transforms library

INSTALLATION GUIDE

Version 2.3

Copyright (C) 2006-2008 Dmitry Pekurovsky

San Diego Supercomputer Center/UC SanDiego


------------
Notice
------------

    P3DFFT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

------------
Acknowledgements
------------

Prof. P.K.Yeung
Dr. Diego Donzis
Dr. Giri Chukkapalli
Jens Henrik Goebbert
Dr. Geert Brethouwer

------------
Building the P3DFFT library
------------

1. Enter build/ directory.

2. Edit 'makefile' to specify the location where you want the library 
   to be installed (P3DFFT_ROOT) and the library archive name (P3DFFT_LIB). 

3. Create 'makeinc' file with compiler settings appropriate for your 
   architecture, using one of the example makeinc.* files provided

4. Specify library build options by setting DFLAG to a string with a 
   list of preprocessing directives. The choices are as follows:

# -DSIGNLE_PREC : for single precision (default is double precision)
#
# -DONED : for 1D decomposition (default is 2D but it can be made 1D through
#    setting up grid 1 x n when running the code) 
#
# -DFFTW or -DESSL for using FFTW3 library or ESSL (on IBM) in 1D FFTs.
#   One of these has to be set.
#
# -DESTIMATE, -DMEASURE or -DPATIENT (default -DMEASURE) for initialization thouroughness in setting up FFTW calls   (this option only goes with -DFFTW)
# For search-once-for-a-fast-algorithm "-DMEASURE" (takes more time 
#on p3dfft_setup())
# For search-once-for-the-fastest-algorithm "-DPATIENT" (takes much 
#more time on p3dfft_setup())
#
# -DDIMS_C to assign processor rows and columns according to C convention, 
# rather than "Fortran", which is default.
#
# -DUSE_EVEN for using MPI_Alltoall instead of MPI_Alltoallv. This method
#   pads the send buffers with zeros to make them equal size. This option
#   is not needed on most architectures.
# -DSTRIDE1 [-DNBL_X=... -DNBL_Y=...] to enable stride-1 data structure on 
#  output (this may in some cases give some advantage in performance). 
#  You can define loop blocking factors NBL_X and NBL_Y to experiment, 
#  otherwise they are set to default values. 
  

5. Be sure to specify an appropriate linking flags for your choice 
   of underlying 1D FFT library (FFT_LIB). Do the same for the include file 
   locations of this library (INCL).  

6. Enter 'make' on the command line. This will build the library and 
   install it in the location specified by P3DFFT_ROOT.
   (Entering 'make lib' only builds the library but does not install it.  )

------------
Building the examples suite
------------

1. Enter sample/ directory
2. Create and edit 'makeinc' similar to the above. 
3. C interface has been tested with Intel, PGI and IBM compilers. 
With PGI and IBM you need to specify -DPGI or -DIBM respectively 
in CFLAGS. 
4. Type 'make'. This will compile and link all FORTAN and C examples, 
   in their own subdirectories. It is also possible to compile
   either Fortran or C separately ('make FORTRAN' or 'make C').
5. Note: C examples are in single precision, while Fortran examples
   can be linked with either single or double precision libraries. 

